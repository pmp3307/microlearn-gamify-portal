
import React, { createContext, useState, useContext, useEffect } from 'react';
import { toast } from '@/hooks/use-toast';

type User = {
  id: string;
  name: string;
  email: string;
  role: 'student' | 'instructor' | 'admin';
  avatar?: string;
};

type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
  updateProfile: (data: Partial<User>) => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Check if user is saved in localStorage
    const savedUser = localStorage.getItem('microlearn_user');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
    setIsLoading(false);
  }, []);

  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      // In a real app, you would make an API call here
      // For demo purposes, we'll mock a successful login with hardcoded users
      
      if (email === 'john@example.com' && password === 'password123') {
        const user: User = {
          id: '1',
          name: 'John Doe',
          email: 'john@example.com',
          role: 'student',
          avatar: '',
        };
        
        setUser(user);
        localStorage.setItem('microlearn_user', JSON.stringify(user));
        toast({
          title: "Login successful",
          description: `Welcome back, ${user.name}!`,
        });
      } else if (email === 'admin@example.com' && password === 'admin123') {
        const user: User = {
          id: '2',
          name: 'Admin User',
          email: 'admin@example.com',
          role: 'admin',
          avatar: '',
        };
        
        setUser(user);
        localStorage.setItem('microlearn_user', JSON.stringify(user));
        toast({
          title: "Login successful",
          description: `Welcome back, ${user.name}!`,
        });
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (error) {
      toast({
        title: "Login failed",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (name: string, email: string, password: string) => {
    try {
      setIsLoading(true);
      // In a real app, you would make an API call here
      // For demo purposes, we'll mock a successful registration
      
      const newUser: User = {
        id: '3', // In a real app, this would be generated by the backend
        name,
        email,
        role: 'student',
      };
      
      setUser(newUser);
      localStorage.setItem('microlearn_user', JSON.stringify(newUser));
      toast({
        title: "Registration successful",
        description: `Welcome to MicroLearn, ${name}!`,
      });
    } catch (error) {
      toast({
        title: "Registration failed",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('microlearn_user');
    toast({
      title: "Logout successful",
      description: "You have been logged out.",
    });
  };

  const updateProfile = async (data: Partial<User>) => {
    try {
      setIsLoading(true);
      // In a real app, you would make an API call here
      if (!user) throw new Error('Not authenticated');
      
      const updatedUser = {
        ...user,
        ...data,
      };
      
      setUser(updatedUser);
      localStorage.setItem('microlearn_user', JSON.stringify(updatedUser));
      toast({
        title: "Profile updated",
        description: "Your profile has been updated successfully.",
      });
    } catch (error) {
      toast({
        title: "Update failed",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider value={{ user, isLoading, login, register, logout, updateProfile }}>
      {children}
    </AuthContext.Provider>
  );
};
